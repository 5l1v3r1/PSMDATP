function Get-MDATPTvmVulnerability{
    <#
    .Synopsis
    Get-MDATPTvmVulnerability

    .DESCRIPTION
    Get-MDATPTvmVulnerability retrieves Microsoft Defender Advanced Threat Protection Threat and Vulnerability Management
    vulnerability informaition

    .PARAMETER Severity
    
    Severity level assigned to the security vulnerability based on the CVSS score and dynamic factors influenced by the threat landscape
    Low, Medium, High, Critical
    
    .PARAMETER IsExploitAvailable

    Setting this parameter limits the results to vulnerabilities where exploit code for the vulnerability is publicly available

    .PARAMETER MTPConfigFile
    The MTPConfigFile contains the API connection information, if not specified a default PoshMTPconfig.json  is used that must be located in the module folder

    .EXAMPLE
    Get-MDATPTvmVulnerability

    This command retrieves all TVM vulnerability information

    .EXAMPLE
        $tvmvulninfo = Get-MDATPTvmVulnerability -MTPConfigFile "C:\Users\Alex\Documents\WindowsPowerShell\Modules\PSMDATP\PoshMTPconfig.json"
        

    .NOTES
    Version:        1.0
    Author:         Alex Verboon
    Creation Date:  18.07.2020
    Purpose/Change: Initial script development
    #>
    [CmdletBinding()]
    Param(
        # Severity level
        [Parameter(Mandatory=$false)]
        [ValidateSet('Low','Medium','High','Critical')]
        [String]$SeverityLevel,


        # publicexploit
        [Parameter(Mandatory=$false)]
        [switch]$IsExploitAvailable,

        # MDATP configfile
        [Parameter(Mandatory=$false)]
        [String]$MTPConfigFile
    )

    Begin{
        # Begin Get API Information
        If ($MTPConfigFile){
            $PoshMTPconfigFilePath = $MTPConfigFile
            Write-Verbose "MTP ConfigFile parameter: $PoshMTPconfigFilePath"
        }
        Else{
            # If no configfile is defined we use a defined lcoation .\Config\PoshMTPconfig.json
            $ConfigFileDir =  [IO.Directory]::GetParent($PSScriptRoot)
            $PoshMTPconfigFilePath = "$ConfigFileDir\" +  "PoshMTPconfig.json"
            Write-Verbose "MTP ConfigFile static: $PoshMTPconfigFilePath"
        }

        Write-Verbose "Checking for $PoshMTPconfigFilePath"
        If (Test-Path -Path $PoshMTPconfigFilePath -PathType Leaf){
            $ConfigSettings = @(Get-Content -Path "$PoshMTPconfigFilePath" | ConvertFrom-Json)
            $OAuthUri = $ConfigSettings.API_MDATP.OAuthUri
            $ClientID = $ConfigSettings.API_MDATP.ClientID
            $ClientSecret = $ConfigSettings.API_MDATP.ClientSecret
        }
        Else{
            Write-Error "$PoshMTPconfigFilePath not found"
            Break
        }
        # End Get API Information

        # Connect with MDATP API
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $Body = @{
            resource      = "https://api.securitycenter.windows.com"
            client_id     = $ClientID
            client_secret = $ClientSecret
            grant_type    = 'client_credentials'
            redirectUri   = "https://localhost:8000"
        }
        $Response = Invoke-RestMethod -Method Post -Uri $OAuthUri -Body $Body

        $headers = @{
            'Content-Type' = 'application/json'
            Accept         = 'application/json'
            Authorization  = "Bearer $($Response.access_token)"
        }
    }
    Process{
        Try{
            $tvmuri = "https://api.securitycenter.windows.com/api/vulnerabilities"
            $tvmrVulnInfo = @(Invoke-RestMethod -Uri $tvmuri -Headers $Headers -Body $Body -Method Get -Verbose -ContentType application/json)

        }
        Catch{
            $errorMessage = $_.Exception.Message
            Write-Error "Error retrieving MDATP TVM vulnerability data [$errorMessage]"
        }
        
        If ($Severity){
            $Result = $tvmrVulnInfo.value | Where-Object {$_.VulnerabilitySeverityLevel -eq "$Severity"}
        }
        Else{
            $Result = $tvmrVulnInfo.value
        }

        If ($IsExploitAvailable){
            $Result = $Result | Where-Object {$_.publicExploit -eq $true}
        }

        $Result


    }
    End{}
}